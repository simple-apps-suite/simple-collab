// SPDX-FileCopyrightText: Copyright 2025 Fabio Iotti
// SPDX-License-Identifier: AGPL-3.0-only

using SimpleCollab.CodeAnalysis.Utility;

namespace SimpleCollab.CodeAnalysis.SqlGenerator;

static class SqlCommandHelper
{
    public const string SqlQueryAttributeFullName =
        "SimpleCollab.CodeAnalysis.SqlGenerator.SqlQueryAttribute";

    public const string SqlCommandAttributeFullName =
        "SimpleCollab.CodeAnalysis.SqlGenerator.SqlCommandAttribute";

    public static string AttributesSource { get; } =
        """
            /// <auto-generated/>

            #nullable enable

            using System;

            namespace SimpleCollab.CodeAnalysis.SqlGenerator
            {
                /// <summary>
                /// Used as a marker in logs for queries.
                /// </summary>
                internal sealed class Queries
                {
                    Queries() { }
                }

                /// <summary>
                /// Attribute to mark a method as a SQL command.
                /// The SQL command will be generated at compile time.
                /// </summary>
                [AttributeUsage(AttributeTargets.Method)]
                internal class SqlCommandAttribute : Attribute
                {
                    public string Sql { get; }

                    public SqlCommandAttribute(string sql)
                    {
                        Sql = sql;
                    }
                }

                /// <summary>
                /// Attribute to mark a method as a SQL query.
                /// The SQL query will be generated at compile time.
                /// </summary>
                [AttributeUsage(AttributeTargets.Method)]
                internal class SqlQueryAttribute : SqlCommandAttribute
                {
                    public SqlQueryAttribute(string sql) : base(sql)
                    {
                    }
                }
            }

            """.ReplaceNewLines();

    public static string GenerateSource(SqlCommandData data) =>
        $$"""
            /// <auto-generated/>

            #nullable enable

            using System.Data.Common;
            using System.Diagnostics;
            using System.Globalization;
            using System.Runtime.CompilerServices;
            using System.Text;
            using System.Threading;
            using SimpleCollabService.Utility;

            namespace {{data.Namespace}}
            {
                partial {{data.TypeType}} {{data.TypeName}}
                {
                    /// <summary>
                    /// Execute SQL {{(data.IsQuery ? "query" : "command")}}.
                    /// <code>
                    /// {{data.Sql.ReplaceNewLines('\n' + """
                    /// X
            """.TrimEnd('X')).ReplaceNewLines()}}
                    /// </code>
                    /// </summary>
                    [CompilerGenerated]
                    {{data.MethodVisibility}}{{(data.MethodVisibility is null ? "" : " ")}}static async partial {{data.ResultType ?? "void"}} {{data.MethodName}}({{string.Join(", ", data.Parameters.Select(p => $"{(data.ReturnsAsyncEnumerable && p.Type == KnownTypeNames.CancellationToken ? "[EnumeratorCancellation] " : "")}{p.Type} {p.Name}"))}})
                    {
                        ILogger logger = {{data.DbConnectionParameter}}.GetServiceProvider().GetRequiredService<ILogger<SimpleCollab.CodeAnalysis.SqlGenerator.Queries>>();

                        DbCommand command = {{data.DbConnectionParameter}}.CreateCommand();
                        command.CommandText = {{"\"\"\""}}
                            {{data.Sql.ReplaceNewLines('\n' + """
                            X
            """.TrimEnd('X')).ReplaceNewLines()}}
                            {{"\"\"\""}};

                        // Parameters
            {{string.Join("", data.Parameters.SelectMany(p => p.SqlIndices.Select(i => (Index: i, p.Name))).OrderBy(p => p.Index).Select(p => $$"""
                        DbParameter {{p.Name}}Parameter = command.CreateParameter();
                        {{p.Name}}Parameter.ParameterName = "{{p.Name}}";
                        {{p.Name}}Parameter.Value = {{p.Name}};
                        command.Parameters.Add({{p.Name}}Parameter);

            """))}}
                        // Connection
                        await {{data.DbConnectionParameter}}.OpenAsync(cancellationToken);

                        long startTimestamp = Stopwatch.GetTimestamp();
                        if (logger.IsEnabled(LogLevel.Debug))
                        {
                            StringBuilder? parametersSb = null;
                            if (command.Parameters.Count > 0)
                            {
                                parametersSb = new(" with parameters [");
                                foreach (DbParameter param in command.Parameters)
                                {
                                    if (parametersSb.Length > " with parameters [".Length)
                                        parametersSb.Append(",");

                                    parametersSb.AppendFormat(CultureInfo.InvariantCulture, " ${0}: {1}", param.ParameterName, param.Value);
                                }
                                parametersSb.Append(" ]");
                            }

                            logger.LogDebug("Executing SQL commmand/query{Parameters}:\n{Command}", parametersSb, command.CommandText);
                        }

                        try
                        {
                            // Query/Command
            {{(data switch
        {
            { IsQuery: true, ReturnsAsyncEnumerable: true } => $$"""
                            using (DbDataReader reader = await command.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false))
                            {
                                while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))
                                {
                                    // Result
            {{(IsSimpleType(data.ResultTypeInner!, out string? reader) ? $$"""
                                    yield return reader.{{reader}}({{0}});
            """ : $$"""
                                    yield return new {{data.ResultTypeInner}}() {{{string.Join("", data.ResultFields.Select((f, i) => $$"""
                                        {{f.Name}} = reader.{{GetSimpleTypeReader(f.Type)}}({{i}}),
            """))}}
                                    };
            """)}}
                                }
                            }
            """,
            { IsQuery: true, ReturnsAsyncEnumerable: false } => $$"""
                            object? result = await command.ExecuteScalarAsync(cancellationToken);
                            return ReferenceEquals(result, null) ? default! : ({{data.ResultTypeInner}})Convert.ChangeType(result!, typeof({{(data.ResultTypeInnerIsReferenceType ? data.ResultTypeInner?.TrimEnd('?') : data.ResultTypeInner)}}));
            """,
            { IsQuery: false } => $$"""
                            {{(data.ResultTypeInner is null ? "" : "return ")}}await command.ExecuteNonQueryAsync(cancellationToken).ConfigureAwait(false);
            """
        })}}
                        }
                        finally
                        {
                            if (logger.IsEnabled(LogLevel.Debug))
                            {
                                TimeSpan duration = Stopwatch.GetElapsedTime(startTimestamp);
                                logger.LogDebug("Elapsed time: {Duration}", duration);
                            }
                        }
                    }
                }
            }
            
            """.ReplaceNewLines();

    static bool IsSimpleType(string type, out string reader) =>
        (
            reader = type switch
            {
                "bool" => "GetBoolean",
                "byte" => "GetByte",
                "char" => "GetChar",
                "DateTime" => "GetDateTime",
                "decimal" => "GetDecimal",
                "double" => "GetDouble",
                "float" => "GetFloat",
                "Guid" => "GetGuid",
                "short" => "GetInt16",
                "int" => "GetInt32",
                "long" => "GetInt64",
                "string" => "GetString",
                "Stream" => "GetStream",
                "TextReader" => "GetTextReader",
                "object" => "GetValue",
                _ => "",
            }
        )
            is not "";

    static string GetSimpleTypeReader(string type) =>
        IsSimpleType(type, out string? reader) ? reader : throw new NotSupportedException();
}
